#include<stdio.h>
struct Process {
    int burstTime;
    int priority;
    int waitingTime;
    int turnaroundTime;
};
void priorityScheduling(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority > processes[j + 1].priority) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
    processes[0].waitingTime = 0;
    processes[0].turnaroundTime = processes[0].burstTime;
    for (int i = 1; i < n; i++) {
        processes[i].waitingTime = processes[i - 1].turnaroundTime;
        processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
    }
}
void calculateAverages(struct Process processes[], int n, float *avgWaitingTime, float *avgTurnaroundTime) {
    *avgWaitingTime = 0;
    *avgTurnaroundTime = 0;

    for (int i = 0; i < n; i++) {
        *avgWaitingTime += processes[i].waitingTime;
        *avgTurnaroundTime += processes[i].turnaroundTime;
    }
    *avgWaitingTime /= n;
    *avgTurnaroundTime /= n;
}
void displayResults(struct Process processes[], int n, float avgWaitingTime, float avgTurnaroundTime) {
    printf("\nProcess\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, processes[i].burstTime, processes[i].priority,
               processes[i].waitingTime, processes[i].turnaroundTime);
    }
    printf("\nAverage Waiting Time: %.2f", avgWaitingTime);
    printf("\nAverage Turnaround Time: %.2f\n", avgTurnaroundTime);
}
int main() {
    int n = 3;
    struct Process processes[] = {
            {30, 2, 0, 0},
            {5, 1, 0, 0},
            {12, 3, 0, 0}
    };
    priorityScheduling(processes, n);
    float avgWaitingTime, avgTurnaroundTime;
    calculateAverages(processes, n, &avgWaitingTime, &avgTurnaroundTime);
    displayResults(processes, n, avgWaitingTime, avgTurnaroundTime);
    return 0;
}
