#include <stdio.h>
#include <limits.h>
#define NUM_PARTITIONS 6
#define NUM_PROCESSES 5
int memoryPartitions[NUM_PARTITIONS] = {300, 600, 350, 200, 750, 125};
int processes[NUM_PROCESSES] = {115, 500, 358, 200, 375};
int allocatedPartitions[NUM_PROCESSES] = {-1, -1, -1, -1, -1};
void worstFit() {
    for (int i = 0; i < NUM_PROCESSES; ++i) {
        int worstFitIndex = -1;
        int worstFitSize = INT_MIN;

        for (int j = 0; j < NUM_PARTITIONS; ++j) {
            if (memoryPartitions[j] >= processes[i] && memoryPartitions[j] > worstFitSize) {
                worstFitIndex = j;
                worstFitSize = memoryPartitions[j];
            }
        }
        if (worstFitIndex != -1) {
            allocatedPartitions[i] = worstFitIndex;
            memoryPartitions[worstFitIndex] -= processes[i];
        }
    }
}
void displayAllocation() {
    printf("Process\t\tSize\t\tAllocated Partition\n");
    for (int i = 0; i < NUM_PROCESSES; ++i) {
        printf("%d\t\t%d KB\t\t", i + 1, processes[i]);
        if (allocatedPartitions[i] != -1) {
            printf("%d\n", allocatedPartitions[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}
void displayRemainingMemory() {
    printf("\nRemaining Memory in Partitions:\n");
    for (int i = 0; i < NUM_PARTITIONS; ++i) {
        printf("Partition %d: %d KB\n", i + 1, memoryPartitions[i]);
    }
}
int main() {
    printf("Initial Memory Partitions:\n");
    for (int i = 0; i < NUM_PARTITIONS; ++i) {
        printf("Partition %d: %d KB\n", i + 1, memoryPartitions[i]);
    }
    worstFit();
    printf("\nMemory Allocation using Worst-Fit Algorithm:\n");
    displayAllocation();
    displayRemainingMemory();
    return 0;
}
