#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#define NUM_INSTANCES 4
sem_t semaphore;
void* process(void* id) {
    int process_id = *(int*)id;
    printf("Process P%d is waiting...\n", process_id);
    sem_wait(&semaphore);
    printf("Process P%d is in critical section.\n", process_id);
    for (int i = 0; i < 100000000; ++i) {
    }
    printf("Process P%d is exiting critical section.\n", process_id);
    sem_post(&semaphore);
    return NULL;
}
int main() {
    sem_init(&semaphore, 0, NUM_INSTANCES);
    pthread_t threads[4];
    int process_ids[4] = {1, 2, 3, 4};
    for (int i = 0; i < 4; ++i) {
        pthread_create(&threads[i], NULL, process, &process_ids[i]);
    }
    for (int i = 0; i < 4; ++i) {
        pthread_join(threads[i], NULL);
    }
    printf("Process P5 is waiting...\n");
    sem_wait(&semaphore);
    printf("Process P5 is in critical section.\n");
    for (int i = 0; i < 100000000; ++i) {
    }
    printf("Process P5 is exiting critical section.\n");
    sem_post(&semaphore);
    sem_destroy(&semaphore);
    return 0;
}
